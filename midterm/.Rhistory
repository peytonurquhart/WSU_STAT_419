metalRank
source("setup-owell.R");
wells.df$Group = c(rep(1, 17), rep(2, 5), 3);
# options(digits = 4); # limit the matrix form
str(wells.df);
# https://brand.wsu.edu/visual/colors/
wsu.crimson = "#981e32";
wsu.gray    = "#717171";
# names(wells.df);
metals = wells.df[,14:28];
rownames(metals) = wells.df$well;
# metals;
WM = as.matrix(metals);
MW = transposeMatrix(WM);
WW = WM %*% MW;
metalRank = matrix.computeEigenRank(WW, "power", "max-100", pow=22);
print(metalRank)
metalRank
rownames(metalRank)
names(metalRank)
temp = cbind(names(metalRank), metalRank)
temp
temp2 = cbind(names(metalRank.s), metalRank.s)
# names(wells.df);
metals.s = scale(wells.df[,14:28]);
rownames(metals.s) = wells.df$well;
# metals.s;
WM = as.matrix(metals.s);
MW = transposeMatrix(WM);
WW = WM %*% MW;
metalRank.s = matrix.computeEigenRank(WW, "power", "max-100", pow=22);
print(metalRank.s)
temp2 = cbind(names(metalRank.s), metalRank.s)
temp3 = merge(temp1,temp2)
temp
temp = as.numeric(temp)
rownames(temp) = c("well","metalRank")
temp = as.data.frame(temp)
rownames(temp) = c("well","metalRank")
temp
length(temp)
temp2 = cbind(names(metalRank), metalRank)
temp2 = as.data.frame(temp2)
temp2
temp3 = cbind(names(metalRank.s), metalRank.s)
temp3 = as.data.frame(temp3)
temp3
temp = merge(temp2,temp3,by="V1")
temp
setOption("maxprint", 1000)
setOption("max.print", 1000)
temp
str(temp)
temp = assignColumnsTypeInDataFrame(c("V1", "metalRank", "metalRank.s"), "numeric", temp)
str(temp)
sortDataFrameByNumericColumns(temp, "V1")
plot(temp$metalRank, temp$metalRank.s)
cor(temp$metalRank, temp$metalRank.s)
cor(temp$metalRank.s, temp$metalRank)
cor(metalRank, metalRank.s);
temp$metalRank
metalRank
temp
min(temp$metalRank)
min(temp$metalRank.s)
x = pracma::primes(1500)
x
scale(x)
# names(wells.df);
chemistry = wells.df[,32:41];
rownames(chemistry) = wells.df$well;
# chemistry;
WC = as.matrix(chemistry);
CW = transposeMatrix(WC);
WW = WC %*% CW;
chemistryRank = matrix.computeEigenRank(WW, "power", "max-100", pow=22);
chemistryRank;
# names(wells.df);
chemistry.k = wells.df[,29:48];
rownames(chemistry.k) = wells.df$well;
# chemistry.k;
WC = as.matrix(chemistry.k);
CW = transposeMatrix(WC);
WW = WC %*% CW;
chemistryRank.k = matrix.computeEigenRank(WW, "power", "max-100", pow=22);
chemistryRank.k;
cor(chemistryRank, chemistryRank.k);
temp = as.data.frame(cbind(rownames(chemistryRank), chemistryRank))
tempk = as.data.frame(cbind(rownames(chemistryRank.k), chemistryRank.k))
tempk
temp
temp = as.data.frame(cbind(names(chemistryRank), chemistryRank))
temp
tempk = as.data.frame(cbind(names(chemistryRank.k), chemistryRank.k))
tempk
tempm = merge(temp, tempk, by="V1")
tempm
cor(tempm)
cor(tempm$chemistryRank, tempm$chemistryRank.k)
tempm = assignColumnsTypeInDataFrame(c("V1", "chemistryRank", "chemistryRank.k"), "numeric", tempm)
cor(tempm$chemistryRank, tempm$chemistryRank.k)
wells.df$SAR
cor(wells.df$SAR, wells.df$Na.per)
cor(wells.df$Na, wells.df$Na.per)
cor(wells.df$Na, wells.df$SAR)
tempy = as.data.frame(cbind(names(metalRank), metalRank))
tempy
temp <- as.data.frame(cbind(names(metalRank), metalRank))
temp1 <- as.data.frame(cbind(names(metalRank.s), metalRank.s))
temp2 <- merge(temp, temp1, by="V1")
temp2 <- assignColumnsTypeInDataFrame(c("V1", "metalRank", "metalRanks.s"), "numeric", temp2)
# -- INSERT CODE HERE --
## LOAD THE DATA (either Github or Dropbox)
## Show a visualization of the multivariate data.
require("ggplot2")
options(max.print=1000000)
library(devtools)
library(rstudioapi)
github.remote = "https://raw.githubusercontent.com/peytonurquhart/WSU_STAT_419/main/";
include.draft = paste0( github.remote, "datasets/declaration/draft.txt");
include.final = paste0( github.remote, "datasets/declaration/final.txt");
local.draft = paste0(dirname(getActiveDocumentContext()$path), "/draft.txt")
local.final = paste0(dirname(getActiveDocumentContext()$path), "/final.txt");
#download.file(url=include.draft, destfile=local.draft, method='curl');
#download.file(url=include.final, destfile=local.final, method='curl');
# get percent of each letter which exists in both drafts with my scaleAsPercent() function
x = countAllChars_f(local.draft);
dfl = scaleAsPercent(countLowerCaseChars_f(local.draft), x);
dfl = xyDataframeFromColYDataframe(dfl)
y = countAllChars_f(local.final);
dff = scaleAsPercent(countLowerCaseChars_f(local.final), y);
dff= xyDataframeFromColYDataframe(dff)
plotDeclData(dfl,dff);
desc.df = as.data.frame(matrix(0, ncol = 4, nrow = 41));
names(desc.df)[1] <- "variable";
names(desc.df)[2] <- "property";
names(desc.df)[3] <- "units";
names(desc.df)[4] <- "desc";
for(i in 14:54)
{
desc.df$variable[i - 13] <- names(wells.df)[i]
}
#var    #property   #units       #desc
desc.df <- nameWellDescEntry(desc.df, "pH", "hydrogen", "log scale", "Potential power of hydrogen");
desc.df <- nameWellDescEntry(desc.df, "Eh", "electric", "mV", "Redox");
desc.df <- nameWellDescEntry(desc.df, "As", "metal", "ug/L", "Arsenic content");
desc.df <- nameWellDescEntry(desc.df, "B", "metal", "ug/L", "Boron content");
desc.df <- nameWellDescEntry(desc.df, "Ba", "metal", "ug/L", "Barium content");
desc.df <- nameWellDescEntry(desc.df, "Be", "metal", "ug/L", "Beryllium content");
desc.df <- nameWellDescEntry(desc.df, "Cd", "metal", "ug/L", "Cadmium content");
desc.df <- nameWellDescEntry(desc.df, "Co", "metal", "ug/L", "Cobalt content");
desc.df <- nameWellDescEntry(desc.df, "Cr", "metal", "ug/L", "Chromium content");
desc.df <- nameWellDescEntry(desc.df, "Cu", "metal", "ug/L", "Copper content");
desc.df <- nameWellDescEntry(desc.df, "Fe", "metal", "ug/L", "Iron content");
desc.df <- nameWellDescEntry(desc.df, "Hg", "metal", "ug/L", "Mercury content");
desc.df <- nameWellDescEntry(desc.df, "Mn", "metal", "ug/L", "Manganese content");
desc.df <- nameWellDescEntry(desc.df, "Mo", "metal", "ug/L", "Molybdenum content");
desc.df <- nameWellDescEntry(desc.df, "Pb", "metal", "ug/L", "Lead content");
desc.df <- nameWellDescEntry(desc.df, "Se", "metal", "ug/L", "Selenium content");
desc.df <- nameWellDescEntry(desc.df, "Zn", "metal", "ug/L", "Zinc content");
desc.df <- nameWellDescEntry(desc.df, "TDS", "solids", "mg/L", "Total dissolved solids");
desc.df <- nameWellDescEntry(desc.df, "Ca", "chemical", "mg/L", "Calcium content");
desc.df <- nameWellDescEntry(desc.df, "K", "chemical", "mg/L", "Potassium content");
desc.df <- nameWellDescEntry(desc.df, "Mg", "chemical", "mg/L", "Magnesium content");
desc.df <- nameWellDescEntry(desc.df, "Na", "chemical", "mg/L", "Sodium content");
desc.df <- nameWellDescEntry(desc.df, "HCO3", "chemical", "mg/L", "Bicarbonate content");
desc.df <- nameWellDescEntry(desc.df, "Cl", "chemical", "mg/L", "Chlorine content");
desc.df <- nameWellDescEntry(desc.df, "SO4", "chemical", "mg/L", "Sulfate content");
desc.df <- nameWellDescEntry(desc.df, "NO3", "chemical", "mg/L", "Nitrate content");
desc.df <- nameWellDescEntry(desc.df, "F", "chemical", "mg/L", "Fluorine content");
desc.df <- nameWellDescEntry(desc.df, "PO4", "chemical", "mg/L", "Phosphate content");
desc.df <- nameWellDescEntry(desc.df, "TH", "chemical", "mg/L", "Thorium content");
desc.df <- nameWellDescEntry(desc.df, "TA", "chemical", "mg/L", "Tantalum content");
desc.df <- nameWellDescEntry(desc.df, "TS", "chemical", "mg/L", "Tennessine content");
desc.df <- nameWellDescEntry(desc.df, "SS", "chemical", "mg/L", "Stainless Steel content");
desc.df <- nameWellDescEntry(desc.df, "COD", "demand", "mg/L", "Chemical oxygen demand (amount to be consumed by water)");
desc.df <- nameWellDescEntry(desc.df, "BOD", "demand", "mg/L", "Biochemical oxygen demand (amount to be consumed by microorganisms");
desc.df <- nameWellDescEntry(desc.df, "DO", "null", "null", "null");
desc.df <- nameWellDescEntry(desc.df, "SAR", "ratio", "meq/L", "Sodium absorption ratio");
desc.df <- nameWellDescEntry(desc.df, "Na.per", "chemical", "meq/L", "Water Na percentage");
desc.df <- nameWellDescEntry(desc.df, "RSC", "chemical", "meq/L", "Residual sodium carbonate");
desc.df <- nameWellDescEntry(desc.df, "Wilcox", "classification", "type", "Wilcox water quality classification");
desc.df <- nameWellDescEntry(desc.df, "Wilcox.C", "classification", "int", "Wilcox water quality C classification");
desc.df <- nameWellDescEntry(desc.df, "Wilcox.S", "classification", "int", "Wilcox water quality S classification");
print(desc.df);
